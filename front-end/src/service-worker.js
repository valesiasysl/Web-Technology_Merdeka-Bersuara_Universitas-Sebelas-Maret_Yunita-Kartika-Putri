/* eslint-disable no-restricted-globals */

import { clientsClaim } from 'workbox-core'; 
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

// Ensure the service worker takes control of all clients as soon as it's activated
clientsClaim();

// Precache assets generated by the build process
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing for navigation requests
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  ({ request, url }) => {
    // Skip non-navigation requests
    if (request.mode !== 'navigate') {
      return false;
    }
    // Skip URLs starting with "/_"
    if (url.pathname.startsWith('/_')) {
      return false;
    }
    // Skip URLs that look like resource URLs (those with a file extension)
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }
    // Handle navigation requests by serving index.html
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Example runtime caching for image requests (e.g., .png files)
registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // ExpirationPlugin ensures that once the cache size limit is reached,
      // the least recently used images are removed
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Allow the web app to trigger skipWaiting via postMessage
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
